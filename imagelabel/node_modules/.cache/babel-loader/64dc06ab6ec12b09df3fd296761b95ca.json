{"ast":null,"code":"import _extends from '../../node_modules/@babel/runtime/helpers/esm/extends.js';\nimport _inheritsLoose from '../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar _jsxFileName = \"/Users/krise/github/react-slider/src/components/ReactSlider/ReactSlider.jsx\";\n/**\n * To prevent text selection while dragging.\n * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n */\n\nfunction pauseEvent(e) {\n  if (e && e.stopPropagation) {\n    e.stopPropagation();\n  }\n\n  if (e && e.preventDefault) {\n    e.preventDefault();\n  }\n\n  return false;\n}\n\nfunction stopPropagation(e) {\n  if (e.stopPropagation) {\n    e.stopPropagation();\n  }\n}\n\nfunction sanitizeInValue(x) {\n  if (x == null) {\n    return [];\n  }\n\n  return Array.isArray(x) ? x.slice() : [x];\n}\n\nfunction prepareOutValue(x) {\n  return x !== null && x.length === 1 ? x[0] : x.slice();\n}\n\nfunction trimSucceeding(length, nextValue, minDistance, max) {\n  for (let i = 0; i < length; i += 1) {\n    const padding = max - i * minDistance;\n\n    if (nextValue[length - 1 - i] > padding) {\n      // eslint-disable-next-line no-param-reassign\n      nextValue[length - 1 - i] = padding;\n    }\n  }\n}\n\nfunction trimPreceding(length, nextValue, minDistance, min) {\n  for (let i = 0; i < length; i += 1) {\n    const padding = min + i * minDistance;\n\n    if (nextValue[i] < padding) {\n      // eslint-disable-next-line no-param-reassign\n      nextValue[i] = padding;\n    }\n  }\n}\n\nfunction addHandlers(eventMap) {\n  Object.keys(eventMap).forEach(key => {\n    if (typeof document !== 'undefined') {\n      document.addEventListener(key, eventMap[key], false);\n    }\n  });\n}\n\nfunction removeHandlers(eventMap) {\n  Object.keys(eventMap).forEach(key => {\n    if (typeof document !== 'undefined') {\n      document.removeEventListener(key, eventMap[key], false);\n    }\n  });\n}\n\nfunction trimAlignValue(val, props) {\n  return alignValue(trimValue(val, props), props);\n}\n\nfunction alignValue(val, props) {\n  const valModStep = (val - props.min) % props.step;\n  let alignedValue = val - valModStep;\n\n  if (Math.abs(valModStep) * 2 >= props.step) {\n    alignedValue += valModStep > 0 ? props.step : -props.step;\n  }\n\n  return parseFloat(alignedValue.toFixed(5));\n}\n\nfunction trimValue(val, props) {\n  let trimmed = val;\n\n  if (trimmed <= props.min) {\n    trimmed = props.min;\n  }\n\n  if (trimmed >= props.max) {\n    trimmed = props.max;\n  }\n\n  return trimmed;\n}\n\nlet ReactSlider = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ReactSlider, _React$Component);\n\n  function ReactSlider(_props) {\n    var _this;\n\n    _this = _React$Component.call(this, _props) || this;\n\n    _this.onKeyUp = () => {\n      _this.onEnd();\n    };\n\n    _this.onMouseUp = () => {\n      _this.onEnd(_this.getMouseEventMap());\n    };\n\n    _this.onTouchEnd = () => {\n      _this.onEnd(_this.getTouchEventMap());\n    };\n\n    _this.onBlur = () => {\n      _this.setState({\n        index: -1\n      }, _this.onEnd(_this.getKeyDownEventMap()));\n    };\n\n    _this.onMouseMove = e => {\n      // Prevent controlled updates from happening while mouse is moving\n      _this.setState({\n        pending: true\n      });\n\n      const position = _this.getMousePosition(e);\n\n      const diffPosition = _this.getDiffPosition(position[0]);\n\n      const newValue = _this.getValueFromPosition(diffPosition);\n\n      _this.move(newValue);\n    };\n\n    _this.onTouchMove = e => {\n      if (e.touches.length > 1) {\n        return;\n      } // Prevent controlled updates from happending while touch is moving\n\n\n      _this.setState({\n        pending: true\n      });\n\n      const position = _this.getTouchPosition(e);\n\n      if (typeof _this.isScrolling === 'undefined') {\n        const diffMainDir = position[0] - _this.startPosition[0];\n        const diffScrollDir = position[1] - _this.startPosition[1];\n        _this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);\n      }\n\n      if (_this.isScrolling) {\n        _this.setState({\n          index: -1\n        });\n\n        return;\n      }\n\n      const diffPosition = _this.getDiffPosition(position[0]);\n\n      const newValue = _this.getValueFromPosition(diffPosition);\n\n      _this.move(newValue);\n    };\n\n    _this.onKeyDown = e => {\n      if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) {\n        return;\n      } // Prevent controlled updates from happening while a key is pressed\n\n\n      _this.setState({\n        pending: true\n      });\n\n      switch (e.key) {\n        case 'ArrowLeft':\n        case 'ArrowDown':\n        case 'Left':\n        case 'Down':\n          e.preventDefault();\n\n          _this.moveDownByStep();\n\n          break;\n\n        case 'ArrowRight':\n        case 'ArrowUp':\n        case 'Right':\n        case 'Up':\n          e.preventDefault();\n\n          _this.moveUpByStep();\n\n          break;\n\n        case 'Home':\n          e.preventDefault();\n\n          _this.move(_this.props.min);\n\n          break;\n\n        case 'End':\n          e.preventDefault();\n\n          _this.move(_this.props.max);\n\n          break;\n\n        case 'PageDown':\n          e.preventDefault();\n\n          _this.moveDownByStep(_this.props.pageFn(_this.props.step));\n\n          break;\n\n        case 'PageUp':\n          e.preventDefault();\n\n          _this.moveUpByStep(_this.props.pageFn(_this.props.step));\n\n          break;\n      }\n    };\n\n    _this.onSliderMouseDown = e => {\n      // do nothing if disabled or right click\n      if (_this.props.disabled || e.button === 2) {\n        return;\n      } // Prevent controlled updates from happening while mouse is moving\n\n\n      _this.setState({\n        pending: true\n      });\n\n      if (!_this.props.snapDragDisabled) {\n        const position = _this.getMousePosition(e);\n\n        _this.forceValueFromPosition(position[0], i => {\n          _this.start(i, position[0]);\n\n          addHandlers(_this.getMouseEventMap());\n        });\n      }\n\n      pauseEvent(e);\n    };\n\n    _this.onSliderClick = e => {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      if (_this.props.onSliderClick && !_this.hasMoved) {\n        const position = _this.getMousePosition(e);\n\n        const valueAtPos = trimAlignValue(_this.calcValue(_this.calcOffsetFromPosition(position[0])), _this.props);\n\n        _this.props.onSliderClick(valueAtPos);\n      }\n    };\n\n    _this.createOnKeyDown = i => e => {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.start(i);\n\n      addHandlers(_this.getKeyDownEventMap());\n      pauseEvent(e);\n    };\n\n    _this.createOnMouseDown = i => e => {\n      // do nothing if disabled or right click\n      if (_this.props.disabled || e.button === 2) {\n        return;\n      } // Prevent controlled updates from happending while mouse is moving\n\n\n      _this.setState({\n        pending: true\n      });\n\n      const position = _this.getMousePosition(e);\n\n      _this.start(i, position[0]);\n\n      addHandlers(_this.getMouseEventMap());\n      pauseEvent(e);\n    };\n\n    _this.createOnTouchStart = i => e => {\n      if (_this.props.disabled || e.touches.length > 1) {\n        return;\n      } // Prevent controlled updates from happending while touch is moving\n\n\n      _this.setState({\n        pending: true\n      });\n\n      const position = _this.getTouchPosition(e);\n\n      _this.startPosition = position; // don't know yet if the user is trying to scroll\n\n      _this.isScrolling = undefined;\n\n      _this.start(i, position[0]);\n\n      addHandlers(_this.getTouchEventMap());\n      stopPropagation(e);\n    };\n\n    _this.handleResize = () => {\n      // setTimeout of 0 gives element enough time to have assumed its new size if\n      // it is being resized\n      const resizeTimeout = window.setTimeout(() => {\n        // drop this timeout from pendingResizeTimeouts to reduce memory usage\n        _this.pendingResizeTimeouts.shift();\n\n        _this.resize();\n      }, 0);\n\n      _this.pendingResizeTimeouts.push(resizeTimeout);\n    };\n\n    _this.renderThumb = (style, i) => {\n      const className = _this.props.thumbClassName + \" \" + _this.props.thumbClassName + \"-\" + i + \" \" + (_this.state.index === i ? _this.props.thumbActiveClassName : '');\n      const props = {\n        'ref': r => {\n          _this[\"thumb\" + i] = r;\n        },\n        'key': _this.props.thumbClassName + \"-\" + i,\n        className,\n        style,\n        'onMouseDown': _this.createOnMouseDown(i),\n        'onTouchStart': _this.createOnTouchStart(i),\n        'onFocus': _this.createOnKeyDown(i),\n        'tabIndex': 0,\n        'role': 'slider',\n        'aria-orientation': _this.props.orientation,\n        'aria-valuenow': _this.state.value[i],\n        'aria-valuemin': _this.props.min,\n        'aria-valuemax': _this.props.max,\n        'aria-label': Array.isArray(_this.props.ariaLabel) ? _this.props.ariaLabel[i] : _this.props.ariaLabel,\n        'aria-labelledby': Array.isArray(_this.props.ariaLabelledby) ? _this.props.ariaLabelledby[i] : _this.props.ariaLabelledby\n      };\n      const state = {\n        index: i,\n        value: prepareOutValue(_this.state.value),\n        valueNow: _this.state.value[i]\n      };\n\n      if (_this.props.ariaValuetext) {\n        props['aria-valuetext'] = typeof _this.props.ariaValuetext === 'string' ? _this.props.ariaValuetext : _this.props.ariaValuetext(state);\n      }\n\n      return _this.props.renderThumb(props, state);\n    };\n\n    _this.renderTrack = (i, offsetFrom, offsetTo) => {\n      const props = {\n        key: _this.props.trackClassName + \"-\" + i,\n        className: _this.props.trackClassName + \" \" + _this.props.trackClassName + \"-\" + i,\n        style: _this.buildTrackStyle(offsetFrom, _this.state.upperBound - offsetTo)\n      };\n      const state = {\n        index: i,\n        value: prepareOutValue(_this.state.value)\n      };\n      return _this.props.renderTrack(props, state);\n    };\n\n    let value = sanitizeInValue(_props.value);\n\n    if (!value.length) {\n      value = sanitizeInValue(_props.defaultValue);\n    } // array for storing resize timeouts ids\n\n\n    _this.pendingResizeTimeouts = [];\n    const zIndices = [];\n\n    for (let i = 0; i < value.length; i += 1) {\n      value[i] = trimAlignValue(value[i], _props);\n      zIndices.push(i);\n    }\n\n    _this.resizeObserver = null;\n    _this.resizeElementRef = /*#__PURE__*/React.createRef();\n    _this.state = {\n      index: -1,\n      upperBound: 0,\n      sliderLength: 0,\n      value,\n      zIndices\n    };\n    return _this;\n  }\n\n  var _proto = ReactSlider.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (typeof window !== 'undefined') {\n      this.resizeObserver = new ResizeObserver(this.handleResize);\n      this.resizeObserver.observe(this.resizeElementRef.current);\n      this.resize();\n    }\n  } // Keep the internal `value` consistent with an outside `value` if present.\n  // This basically allows the slider to be a controlled component.\n  ;\n\n  ReactSlider.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    const value = sanitizeInValue(props.value);\n\n    if (!value.length) {\n      return null;\n    } // Do not allow controlled upates to happen while we have pending updates\n\n\n    if (state.pending) {\n      return null;\n    }\n\n    return {\n      value: value.map(item => trimAlignValue(item, props))\n    };\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    // If an upperBound has not yet been determined (due to the component being hidden\n    // during the mount event, or during the last resize), then calculate it now\n    if (this.state.upperBound === 0) {\n      this.resize();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.clearPendingResizeTimeouts();\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n  };\n\n  _proto.onEnd = function onEnd(eventMap) {\n    if (eventMap) {\n      removeHandlers(eventMap);\n    }\n\n    if (this.hasMoved) {\n      this.fireChangeEvent('onAfterChange');\n    } // Allow controlled updates to continue\n\n\n    this.setState({\n      pending: false\n    });\n    this.hasMoved = false;\n  };\n\n  _proto.getValue = function getValue() {\n    return prepareOutValue(this.state.value);\n  };\n\n  _proto.getClosestIndex = function getClosestIndex(pixelOffset) {\n    let minDist = Number.MAX_VALUE;\n    let closestIndex = -1;\n    const {\n      value\n    } = this.state;\n    const l = value.length;\n\n    for (let i = 0; i < l; i += 1) {\n      const offset = this.calcOffset(value[i]);\n      const dist = Math.abs(pixelOffset - offset);\n\n      if (dist < minDist) {\n        minDist = dist;\n        closestIndex = i;\n      }\n    }\n\n    return closestIndex;\n  };\n\n  _proto.getMousePosition = function getMousePosition(e) {\n    return [e[\"page\" + this.axisKey()], e[\"page\" + this.orthogonalAxisKey()]];\n  };\n\n  _proto.getTouchPosition = function getTouchPosition(e) {\n    const touch = e.touches[0];\n    return [touch[\"page\" + this.axisKey()], touch[\"page\" + this.orthogonalAxisKey()]];\n  };\n\n  _proto.getKeyDownEventMap = function getKeyDownEventMap() {\n    return {\n      keydown: this.onKeyDown,\n      keyup: this.onKeyUp,\n      focusout: this.onBlur\n    };\n  };\n\n  _proto.getMouseEventMap = function getMouseEventMap() {\n    return {\n      mousemove: this.onMouseMove,\n      mouseup: this.onMouseUp\n    };\n  };\n\n  _proto.getTouchEventMap = function getTouchEventMap() {\n    return {\n      touchmove: this.onTouchMove,\n      touchend: this.onTouchEnd\n    };\n  };\n\n  _proto.getValueFromPosition = function getValueFromPosition(position) {\n    const diffValue = position / (this.state.sliderLength - this.state.thumbSize) * (this.props.max - this.props.min);\n    return trimAlignValue(this.state.startValue + diffValue, this.props);\n  };\n\n  _proto.getDiffPosition = function getDiffPosition(position) {\n    let diffPosition = position - this.state.startPosition;\n\n    if (this.props.invert) {\n      diffPosition *= -1;\n    }\n\n    return diffPosition;\n  } // create the `keydown` handler for the i-th thumb\n  ;\n\n  _proto.resize = function resize() {\n    const {\n      slider,\n      thumb0: thumb\n    } = this;\n\n    if (!slider || !thumb) {\n      return;\n    }\n\n    const sizeKey = this.sizeKey(); // For the slider size, we want to use the client width/height, excluding any borders\n\n    const sliderRect = slider.getBoundingClientRect();\n    const sliderSize = slider[sizeKey];\n    const sliderMax = sliderRect[this.posMaxKey()];\n    const sliderMin = sliderRect[this.posMinKey()]; // For the thumb size, we want to use the outer width/height, including any borders\n\n    const thumbRect = thumb.getBoundingClientRect();\n    const thumbSize = thumbRect[sizeKey.replace('client', '').toLowerCase()];\n    const upperBound = sliderSize - thumbSize;\n    const sliderLength = Math.abs(sliderMax - sliderMin);\n\n    if (this.state.upperBound !== upperBound || this.state.sliderLength !== sliderLength || this.state.thumbSize !== thumbSize) {\n      this.setState({\n        upperBound,\n        sliderLength,\n        thumbSize\n      });\n    }\n  } // calculates the offset of a thumb in pixels based on its value.\n  ;\n\n  _proto.calcOffset = function calcOffset(value) {\n    const range = this.props.max - this.props.min;\n\n    if (range === 0) {\n      return 0;\n    }\n\n    const ratio = (value - this.props.min) / range;\n    return ratio * this.state.upperBound;\n  } // calculates the value corresponding to a given pixel offset, i.e. the inverse of `calcOffset`.\n  ;\n\n  _proto.calcValue = function calcValue(offset) {\n    const ratio = offset / this.state.upperBound;\n    return ratio * (this.props.max - this.props.min) + this.props.min;\n  };\n\n  _proto.calcOffsetFromPosition = function calcOffsetFromPosition(position) {\n    const {\n      slider\n    } = this;\n    const sliderRect = slider.getBoundingClientRect();\n    const sliderMax = sliderRect[this.posMaxKey()];\n    const sliderMin = sliderRect[this.posMinKey()]; // The `position` value passed in is the mouse position based on the window height.\n    // The slider bounding rect is based on the viewport, so we must add the window scroll\n    // offset to normalize the values.\n\n    const windowOffset = window[\"page\" + this.axisKey() + \"Offset\"];\n    const sliderStart = windowOffset + (this.props.invert ? sliderMax : sliderMin);\n    let pixelOffset = position - sliderStart;\n\n    if (this.props.invert) {\n      pixelOffset = this.state.sliderLength - pixelOffset;\n    }\n\n    pixelOffset -= this.state.thumbSize / 2;\n    return pixelOffset;\n  } // Snaps the nearest thumb to the value corresponding to `position`\n  // and calls `callback` with that thumb's index.\n  ;\n\n  _proto.forceValueFromPosition = function forceValueFromPosition(position, callback) {\n    const pixelOffset = this.calcOffsetFromPosition(position);\n    const closestIndex = this.getClosestIndex(pixelOffset);\n    const nextValue = trimAlignValue(this.calcValue(pixelOffset), this.props); // Clone this.state.value since we'll modify it temporarily\n    // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n\n    const value = this.state.value.slice();\n    value[closestIndex] = nextValue; // Prevents the slider from shrinking below `props.minDistance`\n\n    for (let i = 0; i < value.length - 1; i += 1) {\n      if (value[i + 1] - value[i] < this.props.minDistance) {\n        return;\n      }\n    }\n\n    this.fireChangeEvent('onBeforeChange');\n    this.hasMoved = true;\n    this.setState({\n      value\n    }, () => {\n      callback(closestIndex);\n      this.fireChangeEvent('onChange');\n    });\n  } // clear all pending timeouts to avoid error messages after unmounting\n  ;\n\n  _proto.clearPendingResizeTimeouts = function clearPendingResizeTimeouts() {\n    do {\n      const nextTimeout = this.pendingResizeTimeouts.shift();\n      clearTimeout(nextTimeout);\n    } while (this.pendingResizeTimeouts.length);\n  };\n\n  _proto.start = function start(i, position) {\n    const thumbRef = this[\"thumb\" + i];\n\n    if (thumbRef) {\n      thumbRef.focus();\n    }\n\n    const {\n      zIndices\n    } = this.state; // remove wherever the element is\n\n    zIndices.splice(zIndices.indexOf(i), 1); // add to end\n\n    zIndices.push(i);\n    this.setState(prevState => ({\n      startValue: prevState.value[i],\n      startPosition: position !== undefined ? position : prevState.startPosition,\n      index: i,\n      zIndices\n    }));\n  };\n\n  _proto.moveUpByStep = function moveUpByStep(step) {\n    if (step === void 0) {\n      step = this.props.step;\n    }\n\n    const oldValue = this.state.value[this.state.index];\n    const newValue = trimAlignValue(oldValue + step, this.props);\n    this.move(Math.min(newValue, this.props.max));\n  };\n\n  _proto.moveDownByStep = function moveDownByStep(step) {\n    if (step === void 0) {\n      step = this.props.step;\n    }\n\n    const oldValue = this.state.value[this.state.index];\n    const newValue = trimAlignValue(oldValue - step, this.props);\n    this.move(Math.max(newValue, this.props.min));\n  };\n\n  _proto.move = function move(newValue) {\n    const {\n      index,\n      value\n    } = this.state;\n    const {\n      length\n    } = value; // Short circuit if the value is not changing\n\n    const oldValue = value[index];\n\n    if (newValue === oldValue) {\n      return;\n    } // Trigger only before the first movement\n\n\n    if (!this.hasMoved) {\n      this.fireChangeEvent('onBeforeChange');\n    }\n\n    this.hasMoved = true; // if \"pearling\" (= thumbs pushing each other) is disabled,\n    // prevent the thumb from getting closer than `minDistance` to the previous or next thumb.\n\n    const {\n      pearling,\n      max,\n      min,\n      minDistance\n    } = this.props;\n\n    if (!pearling) {\n      if (index > 0) {\n        const valueBefore = value[index - 1];\n\n        if (newValue < valueBefore + minDistance) {\n          // eslint-disable-next-line no-param-reassign\n          newValue = valueBefore + minDistance;\n        }\n      }\n\n      if (index < length - 1) {\n        const valueAfter = value[index + 1];\n\n        if (newValue > valueAfter - minDistance) {\n          // eslint-disable-next-line no-param-reassign\n          newValue = valueAfter - minDistance;\n        }\n      }\n    }\n\n    value[index] = newValue; // if \"pearling\" is enabled, let the current thumb push the pre- and succeeding thumbs.\n\n    if (pearling && length > 1) {\n      if (newValue > oldValue) {\n        this.pushSucceeding(value, minDistance, index);\n        trimSucceeding(length, value, minDistance, max);\n      } else if (newValue < oldValue) {\n        this.pushPreceding(value, minDistance, index);\n        trimPreceding(length, value, minDistance, min);\n      }\n    } // Normally you would use `shouldComponentUpdate`,\n    // but since the slider is a low-level component,\n    // the extra complexity might be worth the extra performance.\n\n\n    this.setState({\n      value\n    }, this.fireChangeEvent.bind(this, 'onChange'));\n  };\n\n  _proto.pushSucceeding = function pushSucceeding(value, minDistance, index) {\n    let i;\n    let padding;\n\n    for (i = index, padding = value[i] + minDistance; value[i + 1] !== null && padding > value[i + 1]; i += 1, padding = value[i] + minDistance) {\n      // eslint-disable-next-line no-param-reassign\n      value[i + 1] = alignValue(padding, this.props);\n    }\n  };\n\n  _proto.pushPreceding = function pushPreceding(value, minDistance, index) {\n    for (let i = index, padding = value[i] - minDistance; value[i - 1] !== null && padding < value[i - 1]; i -= 1, padding = value[i] - minDistance) {\n      // eslint-disable-next-line no-param-reassign\n      value[i - 1] = alignValue(padding, this.props);\n    }\n  };\n\n  _proto.axisKey = function axisKey() {\n    if (this.props.orientation === 'vertical') {\n      return 'Y';\n    } // Defaults to 'horizontal';\n\n\n    return 'X';\n  };\n\n  _proto.orthogonalAxisKey = function orthogonalAxisKey() {\n    if (this.props.orientation === 'vertical') {\n      return 'X';\n    } // Defaults to 'horizontal'\n\n\n    return 'Y';\n  };\n\n  _proto.posMinKey = function posMinKey() {\n    if (this.props.orientation === 'vertical') {\n      return this.props.invert ? 'bottom' : 'top';\n    } // Defaults to 'horizontal'\n\n\n    return this.props.invert ? 'right' : 'left';\n  };\n\n  _proto.posMaxKey = function posMaxKey() {\n    if (this.props.orientation === 'vertical') {\n      return this.props.invert ? 'top' : 'bottom';\n    } // Defaults to 'horizontal'\n\n\n    return this.props.invert ? 'left' : 'right';\n  };\n\n  _proto.sizeKey = function sizeKey() {\n    if (this.props.orientation === 'vertical') {\n      return 'clientHeight';\n    } // Defaults to 'horizontal'\n\n\n    return 'clientWidth';\n  };\n\n  _proto.fireChangeEvent = function fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](prepareOutValue(this.state.value), this.state.index);\n    }\n  };\n\n  _proto.buildThumbStyle = function buildThumbStyle(offset, i) {\n    const style = {\n      position: 'absolute',\n      touchAction: 'none',\n      willChange: this.state.index >= 0 ? this.posMinKey() : '',\n      zIndex: this.state.zIndices.indexOf(i) + 1\n    };\n    style[this.posMinKey()] = offset + \"px\";\n    return style;\n  };\n\n  _proto.buildTrackStyle = function buildTrackStyle(min, max) {\n    const obj = {\n      position: 'absolute',\n      willChange: this.state.index >= 0 ? this.posMinKey() + \",\" + this.posMaxKey() : ''\n    };\n    obj[this.posMinKey()] = min;\n    obj[this.posMaxKey()] = max;\n    return obj;\n  };\n\n  _proto.buildMarkStyle = function buildMarkStyle(offset) {\n    var _ref;\n\n    return _ref = {\n      position: 'absolute'\n    }, _ref[this.posMinKey()] = offset, _ref;\n  };\n\n  _proto.renderThumbs = function renderThumbs(offset) {\n    const {\n      length\n    } = offset;\n    const styles = [];\n\n    for (let i = 0; i < length; i += 1) {\n      styles[i] = this.buildThumbStyle(offset[i], i);\n    }\n\n    const res = [];\n\n    for (let i = 0; i < length; i += 1) {\n      res[i] = this.renderThumb(styles[i], i);\n    }\n\n    return res;\n  };\n\n  _proto.renderTracks = function renderTracks(offset) {\n    const tracks = [];\n    const lastIndex = offset.length - 1;\n    tracks.push(this.renderTrack(0, 0, offset[0]));\n\n    for (let i = 0; i < lastIndex; i += 1) {\n      tracks.push(this.renderTrack(i + 1, offset[i], offset[i + 1]));\n    }\n\n    tracks.push(this.renderTrack(lastIndex + 1, offset[lastIndex], this.state.upperBound));\n    return tracks;\n  };\n\n  _proto.renderMarks = function renderMarks() {\n    let {\n      marks\n    } = this.props;\n    const range = this.props.max - this.props.min + 1;\n\n    if (typeof marks === 'boolean') {\n      marks = Array.from({\n        length: range\n      }).map((_, key) => key);\n    } else if (typeof marks === 'number') {\n      marks = Array.from({\n        length: range\n      }).map((_, key) => key).filter(key => key % marks === 0);\n    }\n\n    return marks.map(parseFloat).sort((a, b) => a - b).map(mark => {\n      const offset = this.calcOffset(mark);\n      const props = {\n        key: mark,\n        className: this.props.markClassName,\n        style: this.buildMarkStyle(offset)\n      };\n      return this.props.renderMark(props);\n    });\n  };\n\n  _proto.render = function render() {\n    const offset = [];\n    const {\n      value\n    } = this.state;\n    const l = value.length;\n\n    for (let i = 0; i < l; i += 1) {\n      offset[i] = this.calcOffset(value[i], i);\n    }\n\n    const tracks = this.props.withTracks ? this.renderTracks(offset) : null;\n    const thumbs = this.renderThumbs(offset);\n    const marks = this.props.marks ? this.renderMarks() : null;\n    return /*#__PURE__*/React.createElement('div', {\n      ref: r => {\n        this.slider = r;\n        this.resizeElementRef.current = r;\n      },\n      style: {\n        position: 'relative'\n      },\n      className: this.props.className + (this.props.disabled ? ' disabled' : ''),\n      onMouseDown: this.onSliderMouseDown,\n      onClick: this.onSliderClick\n    }, tracks, thumbs, marks);\n  };\n\n  return ReactSlider;\n}(React.Component);\n\nReactSlider.displayName = 'ReactSlider';\nReactSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 1,\n  pageFn: step => step * 10,\n  minDistance: 0,\n  defaultValue: 0,\n  orientation: 'horizontal',\n  className: 'slider',\n  thumbClassName: 'thumb',\n  thumbActiveClassName: 'active',\n  trackClassName: 'track',\n  markClassName: 'mark',\n  withTracks: true,\n  pearling: false,\n  disabled: false,\n  snapDragDisabled: false,\n  invert: false,\n  marks: [],\n  renderThumb: props => /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n    __self: ReactSlider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 31\n    }\n  })),\n  renderTrack: props => /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n    __self: ReactSlider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 31\n    }\n  })),\n  renderMark: props => /*#__PURE__*/React.createElement(\"span\", _extends({}, props, {\n    __self: ReactSlider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 30\n    }\n  }))\n};\nReactSlider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * The minimum value of the slider.\n   */\n  min: PropTypes.number,\n\n  /**\n   * The maximum value of the slider.\n   */\n  max: PropTypes.number,\n\n  /**\n   * Value to be added or subtracted on each step the slider makes.\n   * Must be greater than zero.\n   * `max - min` should be evenly divisible by the step value.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The result of the function is the value to be added or subtracted\n   * when the `Page Up` or `Page Down` keys are pressed.\n   *\n   * The current `step` value will be passed as the only argument.\n   * By default, paging will modify `step` by a factor of 10.\n   */\n  pageFn: PropTypes.func,\n\n  /**\n   * The minimal distance between any pair of thumbs.\n   * Must be positive, but zero means they can sit on top of each other.\n   */\n  minDistance: PropTypes.number,\n\n  /**\n   * Determines the initial positions of the thumbs and the number of thumbs.\n   *\n   * If a number is passed a slider with one thumb will be rendered.\n   * If an array is passed each value will determine the position of one thumb.\n   * The values in the array must be sorted.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n  /**\n   * Like `defaultValue` but for\n   * [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n  /**\n   * Determines whether the slider moves horizontally (from left to right)\n   * or vertically (from top to bottom).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * The css class set on the slider node.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The css class set on each thumb node.\n   *\n   * In addition each thumb will receive a numbered css class of the form\n   * `${thumbClassName}-${i}`, e.g. `thumb-0`, `thumb-1`, ...\n   */\n  thumbClassName: PropTypes.string,\n\n  /**\n   * The css class set on the thumb that is currently being moved.\n   */\n  thumbActiveClassName: PropTypes.string,\n\n  /**\n   * If `true` tracks between the thumbs will be rendered.\n   */\n  withTracks: PropTypes.bool,\n\n  /**\n   * The css class set on the tracks between the thumbs.\n   * In addition track fragment will receive a numbered css class of the form\n   * `${trackClassName}-${i}`, e.g. `track-0`, `track-1`, ...\n   */\n  trackClassName: PropTypes.string,\n\n  /**\n   * If `true` the active thumb will push other thumbs\n   * within the constraints of `min`, `max`, `step` and `minDistance`.\n   */\n  pearling: PropTypes.bool,\n\n  /**\n   * If `true` the thumbs can't be moved.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Disables thumb move when clicking the slider track\n   */\n  snapDragDisabled: PropTypes.bool,\n\n  /**\n   * Inverts the slider.\n   */\n  invert: PropTypes.bool,\n\n  /**\n   * Shows passed marks on the track, if true it shows all the marks,\n   * if an array of numbers it shows just the passed marks, if a number is passed\n   * it shows just the marks in that steps: like passing 3 shows the marks 3, 6, 9\n   */\n  marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.bool, PropTypes.number]),\n\n  /**\n   * The css class set on the marks.\n   */\n  markClassName: PropTypes.string,\n\n  /**\n   * Callback called before starting to move a thumb. The callback will only be called if the\n   * action will result in a change. The function will be called with two arguments, the first\n   * being the initial value(s) the second being thumb index.\n   */\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n  onBeforeChange: PropTypes.func,\n\n  /**\n   * Callback called on every value change.\n   * The function will be called with two arguments, the first being the new value(s)\n   * the second being thumb index.\n   */\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n  onChange: PropTypes.func,\n\n  /**\n   * Callback called only after moving a thumb has ended. The callback will only be called if\n   * the action resulted in a change. The function will be called with two arguments, the\n   * first being the result value(s) the second being thumb index.\n   */\n  // eslint-disable-next-line max-len\n  // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n  onAfterChange: PropTypes.func,\n\n  /**\n   * Callback called when the the slider is clicked (thumb or tracks).\n   * Receives the value at the clicked position as argument.\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  onSliderClick: PropTypes.func,\n\n  /**\n   * aria-label for screen-readers to apply to the thumbs.\n   * Use an array for more than one thumb.\n   * The length of the array must match the number of thumbs in the value array.\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  ariaLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * aria-labelledby for screen-readers to apply to the thumbs.\n   * Used when slider rendered with separate label.\n   * Use an array for more than one thumb.\n   * The length of the array must match the number of thumbs in the value array.\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  ariaLabelledby: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * aria-valuetext for screen-readers.\n   * Can be a static string, or a function that returns a string.\n   * The function will be passed a single argument,\n   * an object with the following properties:\n   *\n   *     state => `Value: ${state.value}`\n   *\n   * - `state.index` {`number`} the index of the thumb\n   * - `state.value` {`number` | `array`} the current value state\n   * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  ariaValuetext: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * Provide a custom render function for the track node.\n   * The render function will be passed two arguments,\n   * an object with props that should be added to your handle node,\n   * and an object with track and slider state:\n   *\n   *     (props, state) => <div {...props} />\n   *\n   * - `props` {`object`} props to be spread into your track node\n   * - `state.index` {`number`} the index of the track\n   * - `state.value` {`number` | `array`} the current value state\n   */\n  renderTrack: PropTypes.func,\n\n  /**\n   * Provide a custom render function for dynamic thumb content.\n   * The render function will be passed two arguments,\n   * an object with props that should be added to your thumb node,\n   * and an object with thumb and slider state:\n   *\n   *     (props, state) => <div {...props} />\n   *\n   * - `props` {`object`} props to be spread into your thumb node\n   * - `state.index` {`number`} the index of the thumb\n   * - `state.value` {`number` | `array`} the current value state\n   * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n   */\n  // eslint-disable-next-line zillow/react/require-default-props\n  renderThumb: PropTypes.func,\n\n  /**\n   * Provide a custom render function for the mark node.\n   * The render function will be passed one argument,\n   * an object with props that should be added to your handle node\n   *\n   *     (props) => <span {...props} />\n   *\n   * - `props` {`object`} props to be spread into your track node\n   */\n  renderMark: PropTypes.func\n} : {};\nvar ReactSlider$1 = ReactSlider;\nexport { ReactSlider$1 as default };","map":{"version":3,"mappings":"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","names":["pauseEvent","e","stopPropagation","preventDefault","sanitizeInValue","x","Array","isArray","slice","prepareOutValue","length","trimSucceeding","nextValue","minDistance","max","i","padding","trimPreceding","min","addHandlers","eventMap","Object","keys","forEach","key","document","addEventListener","removeHandlers","removeEventListener","trimAlignValue","val","props","alignValue","trimValue","valModStep","step","alignedValue","Math","abs","parseFloat","toFixed","trimmed","ReactSlider","_this","onKeyUp","onEnd","onMouseUp","getMouseEventMap","onTouchEnd","getTouchEventMap","onBlur","setState","index","getKeyDownEventMap","onMouseMove","pending","position","getMousePosition","diffPosition","getDiffPosition","newValue","getValueFromPosition","move","onTouchMove","touches","getTouchPosition","isScrolling","diffMainDir","startPosition","diffScrollDir","onKeyDown","ctrlKey","shiftKey","altKey","metaKey","moveDownByStep","moveUpByStep","pageFn","onSliderMouseDown","disabled","button","snapDragDisabled","forceValueFromPosition","start","onSliderClick","hasMoved","valueAtPos","calcValue","calcOffsetFromPosition","createOnKeyDown","createOnMouseDown","createOnTouchStart","undefined","handleResize","resizeTimeout","window","setTimeout","pendingResizeTimeouts","shift","resize","push","renderThumb","style","className","thumbClassName","state","thumbActiveClassName","r","orientation","value","ariaLabel","ariaLabelledby","valueNow","ariaValuetext","renderTrack","offsetFrom","offsetTo","trackClassName","buildTrackStyle","upperBound","defaultValue","zIndices","resizeObserver","resizeElementRef","React","createRef","sliderLength","componentDidMount","ResizeObserver","observe","current","getDerivedStateFromProps","map","item","componentDidUpdate","componentWillUnmount","clearPendingResizeTimeouts","disconnect","fireChangeEvent","getValue","getClosestIndex","pixelOffset","minDist","Number","MAX_VALUE","closestIndex","l","offset","calcOffset","dist","axisKey","orthogonalAxisKey","touch","keydown","keyup","focusout","mousemove","mouseup","touchmove","touchend","diffValue","thumbSize","startValue","invert","slider","thumb0","thumb","sizeKey","sliderRect","getBoundingClientRect","sliderSize","sliderMax","posMaxKey","sliderMin","posMinKey","thumbRect","replace","toLowerCase","range","ratio","windowOffset","sliderStart","callback","nextTimeout","clearTimeout","thumbRef","focus","splice","indexOf","prevState","oldValue","pearling","valueBefore","valueAfter","pushSucceeding","pushPreceding","bind","event","buildThumbStyle","touchAction","willChange","zIndex","obj","buildMarkStyle","renderThumbs","styles","res","renderTracks","tracks","lastIndex","renderMarks","marks","from","_","filter","sort","a","b","mark","markClassName","renderMark","render","withTracks","thumbs","createElement","ref","onMouseDown","onClick","Component","displayName","defaultProps","__self","__source","fileName","lineNumber","columnNumber","propTypes","PropTypes","number","func","oneOfType","arrayOf","oneOf","string","bool","onBeforeChange","onChange","onAfterChange"],"sources":["C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\node_modules\\react-slider\\src\\components\\ReactSlider\\ReactSlider.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * To prevent text selection while dragging.\n * http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n */\nfunction pauseEvent(e) {\n    if (e && e.stopPropagation) {\n        e.stopPropagation();\n    }\n    if (e && e.preventDefault) {\n        e.preventDefault();\n    }\n    return false;\n}\n\nfunction stopPropagation(e) {\n    if (e.stopPropagation) {\n        e.stopPropagation();\n    }\n}\n\nfunction sanitizeInValue(x) {\n    if (x == null) {\n        return [];\n    }\n    return Array.isArray(x) ? x.slice() : [x];\n}\n\nfunction prepareOutValue(x) {\n    return x !== null && x.length === 1 ? x[0] : x.slice();\n}\n\nfunction trimSucceeding(length, nextValue, minDistance, max) {\n    for (let i = 0; i < length; i += 1) {\n        const padding = max - i * minDistance;\n        if (nextValue[length - 1 - i] > padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[length - 1 - i] = padding;\n        }\n    }\n}\n\nfunction trimPreceding(length, nextValue, minDistance, min) {\n    for (let i = 0; i < length; i += 1) {\n        const padding = min + i * minDistance;\n        if (nextValue[i] < padding) {\n            // eslint-disable-next-line no-param-reassign\n            nextValue[i] = padding;\n        }\n    }\n}\n\nfunction addHandlers(eventMap) {\n    Object.keys(eventMap).forEach(key => {\n        if (typeof document !== 'undefined') {\n            document.addEventListener(key, eventMap[key], false);\n        }\n    });\n}\n\nfunction removeHandlers(eventMap) {\n    Object.keys(eventMap).forEach(key => {\n        if (typeof document !== 'undefined') {\n            document.removeEventListener(key, eventMap[key], false);\n        }\n    });\n}\n\nfunction trimAlignValue(val, props) {\n    return alignValue(trimValue(val, props), props);\n}\n\nfunction alignValue(val, props) {\n    const valModStep = (val - props.min) % props.step;\n    let alignedValue = val - valModStep;\n\n    if (Math.abs(valModStep) * 2 >= props.step) {\n        alignedValue += valModStep > 0 ? props.step : -props.step;\n    }\n\n    return parseFloat(alignedValue.toFixed(5));\n}\n\nfunction trimValue(val, props) {\n    let trimmed = val;\n    if (trimmed <= props.min) {\n        trimmed = props.min;\n    }\n    if (trimmed >= props.max) {\n        trimmed = props.max;\n    }\n\n    return trimmed;\n}\n\nclass ReactSlider extends React.Component {\n    static displayName = 'ReactSlider';\n\n    static propTypes = {\n        /**\n         * The minimum value of the slider.\n         */\n        min: PropTypes.number,\n\n        /**\n         * The maximum value of the slider.\n         */\n        max: PropTypes.number,\n\n        /**\n         * Value to be added or subtracted on each step the slider makes.\n         * Must be greater than zero.\n         * `max - min` should be evenly divisible by the step value.\n         */\n        step: PropTypes.number,\n\n        /**\n         * The result of the function is the value to be added or subtracted\n         * when the `Page Up` or `Page Down` keys are pressed.\n         *\n         * The current `step` value will be passed as the only argument.\n         * By default, paging will modify `step` by a factor of 10.\n         */\n        pageFn: PropTypes.func,\n\n        /**\n         * The minimal distance between any pair of thumbs.\n         * Must be positive, but zero means they can sit on top of each other.\n         */\n        minDistance: PropTypes.number,\n\n        /**\n         * Determines the initial positions of the thumbs and the number of thumbs.\n         *\n         * If a number is passed a slider with one thumb will be rendered.\n         * If an array is passed each value will determine the position of one thumb.\n         * The values in the array must be sorted.\n         */\n        defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n        /**\n         * Like `defaultValue` but for\n         * [controlled components](http://facebook.github.io/react/docs/forms.html#controlled-components).\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n\n        /**\n         * Determines whether the slider moves horizontally (from left to right)\n         * or vertically (from top to bottom).\n         */\n        orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n        /**\n         * The css class set on the slider node.\n         */\n        className: PropTypes.string,\n\n        /**\n         * The css class set on each thumb node.\n         *\n         * In addition each thumb will receive a numbered css class of the form\n         * `${thumbClassName}-${i}`, e.g. `thumb-0`, `thumb-1`, ...\n         */\n        thumbClassName: PropTypes.string,\n\n        /**\n         * The css class set on the thumb that is currently being moved.\n         */\n        thumbActiveClassName: PropTypes.string,\n\n        /**\n         * If `true` tracks between the thumbs will be rendered.\n         */\n        withTracks: PropTypes.bool,\n\n        /**\n         * The css class set on the tracks between the thumbs.\n         * In addition track fragment will receive a numbered css class of the form\n         * `${trackClassName}-${i}`, e.g. `track-0`, `track-1`, ...\n         */\n        trackClassName: PropTypes.string,\n\n        /**\n         * If `true` the active thumb will push other thumbs\n         * within the constraints of `min`, `max`, `step` and `minDistance`.\n         */\n        pearling: PropTypes.bool,\n\n        /**\n         * If `true` the thumbs can't be moved.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Disables thumb move when clicking the slider track\n         */\n        snapDragDisabled: PropTypes.bool,\n\n        /**\n         * Inverts the slider.\n         */\n        invert: PropTypes.bool,\n\n        /**\n         * Shows passed marks on the track, if true it shows all the marks,\n         * if an array of numbers it shows just the passed marks, if a number is passed\n         * it shows just the marks in that steps: like passing 3 shows the marks 3, 6, 9\n         */\n        marks: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.number),\n            PropTypes.bool,\n            PropTypes.number,\n        ]),\n\n        /**\n         * The css class set on the marks.\n         */\n        markClassName: PropTypes.string,\n\n        /**\n         * Callback called before starting to move a thumb. The callback will only be called if the\n         * action will result in a change. The function will be called with two arguments, the first\n         * being the initial value(s) the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onBeforeChange: PropTypes.func,\n\n        /**\n         * Callback called on every value change.\n         * The function will be called with two arguments, the first being the new value(s)\n         * the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onChange: PropTypes.func,\n\n        /**\n         * Callback called only after moving a thumb has ended. The callback will only be called if\n         * the action resulted in a change. The function will be called with two arguments, the\n         * first being the result value(s) the second being thumb index.\n         */\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line zillow/react/require-default-props, zillow/react/no-unused-prop-types\n        onAfterChange: PropTypes.func,\n\n        /**\n         * Callback called when the the slider is clicked (thumb or tracks).\n         * Receives the value at the clicked position as argument.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        onSliderClick: PropTypes.func,\n\n        /**\n         * aria-label for screen-readers to apply to the thumbs.\n         * Use an array for more than one thumb.\n         * The length of the array must match the number of thumbs in the value array.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n        /**\n         * aria-labelledby for screen-readers to apply to the thumbs.\n         * Used when slider rendered with separate label.\n         * Use an array for more than one thumb.\n         * The length of the array must match the number of thumbs in the value array.\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaLabelledby: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.string),\n        ]),\n\n        /**\n         * aria-valuetext for screen-readers.\n         * Can be a static string, or a function that returns a string.\n         * The function will be passed a single argument,\n         * an object with the following properties:\n         *\n         *     state => `Value: ${state.value}`\n         *\n         * - `state.index` {`number`} the index of the thumb\n         * - `state.value` {`number` | `array`} the current value state\n         * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        ariaValuetext: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n        /**\n         * Provide a custom render function for the track node.\n         * The render function will be passed two arguments,\n         * an object with props that should be added to your handle node,\n         * and an object with track and slider state:\n         *\n         *     (props, state) => <div {...props} />\n         *\n         * - `props` {`object`} props to be spread into your track node\n         * - `state.index` {`number`} the index of the track\n         * - `state.value` {`number` | `array`} the current value state\n         */\n        renderTrack: PropTypes.func,\n\n        /**\n         * Provide a custom render function for dynamic thumb content.\n         * The render function will be passed two arguments,\n         * an object with props that should be added to your thumb node,\n         * and an object with thumb and slider state:\n         *\n         *     (props, state) => <div {...props} />\n         *\n         * - `props` {`object`} props to be spread into your thumb node\n         * - `state.index` {`number`} the index of the thumb\n         * - `state.value` {`number` | `array`} the current value state\n         * - `state.valueNow` {`number`} the value of the thumb (i.e. aria-valuenow)\n         */\n        // eslint-disable-next-line zillow/react/require-default-props\n        renderThumb: PropTypes.func,\n\n        /**\n         * Provide a custom render function for the mark node.\n         * The render function will be passed one argument,\n         * an object with props that should be added to your handle node\n         *\n         *     (props) => <span {...props} />\n         *\n         * - `props` {`object`} props to be spread into your track node\n         */\n        renderMark: PropTypes.func,\n    };\n\n    static defaultProps = {\n        min: 0,\n        max: 100,\n        step: 1,\n        pageFn: step => step * 10,\n        minDistance: 0,\n        defaultValue: 0,\n        orientation: 'horizontal',\n        className: 'slider',\n        thumbClassName: 'thumb',\n        thumbActiveClassName: 'active',\n        trackClassName: 'track',\n        markClassName: 'mark',\n        withTracks: true,\n        pearling: false,\n        disabled: false,\n        snapDragDisabled: false,\n        invert: false,\n        marks: [],\n        renderThumb: props => <div {...props} />,\n        renderTrack: props => <div {...props} />,\n        renderMark: props => <span {...props} />,\n    };\n\n    constructor(props) {\n        super(props);\n\n        let value = sanitizeInValue(props.value);\n        if (!value.length) {\n            value = sanitizeInValue(props.defaultValue);\n        }\n\n        // array for storing resize timeouts ids\n        this.pendingResizeTimeouts = [];\n\n        const zIndices = [];\n        for (let i = 0; i < value.length; i += 1) {\n            value[i] = trimAlignValue(value[i], props);\n            zIndices.push(i);\n        }\n\n        this.resizeObserver = null;\n        this.resizeElementRef = React.createRef();\n\n        this.state = {\n            index: -1,\n            upperBound: 0,\n            sliderLength: 0,\n            value,\n            zIndices,\n        };\n    }\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            this.resizeObserver = new ResizeObserver(this.handleResize);\n            this.resizeObserver.observe(this.resizeElementRef.current);\n            this.resize();\n        }\n    }\n\n    // Keep the internal `value` consistent with an outside `value` if present.\n    // This basically allows the slider to be a controlled component.\n    static getDerivedStateFromProps(props, state) {\n        const value = sanitizeInValue(props.value);\n        if (!value.length) {\n            return null;\n        }\n\n        // Do not allow controlled upates to happen while we have pending updates\n        if (state.pending) {\n            return null;\n        }\n\n        return {\n            value: value.map(item => trimAlignValue(item, props)),\n        };\n    }\n\n    componentDidUpdate() {\n        // If an upperBound has not yet been determined (due to the component being hidden\n        // during the mount event, or during the last resize), then calculate it now\n        if (this.state.upperBound === 0) {\n            this.resize();\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearPendingResizeTimeouts();\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n\n    onKeyUp = () => {\n        this.onEnd();\n    };\n\n    onMouseUp = () => {\n        this.onEnd(this.getMouseEventMap());\n    };\n\n    onTouchEnd = () => {\n        this.onEnd(this.getTouchEventMap());\n    };\n\n    onBlur = () => {\n        this.setState({ index: -1 }, this.onEnd(this.getKeyDownEventMap()));\n    };\n\n    onEnd(eventMap) {\n        if (eventMap) {\n            removeHandlers(eventMap);\n        }\n        if (this.hasMoved) {\n            this.fireChangeEvent('onAfterChange');\n        }\n\n        // Allow controlled updates to continue\n        this.setState({ pending: false });\n\n        this.hasMoved = false;\n    }\n\n    onMouseMove = e => {\n        // Prevent controlled updates from happening while mouse is moving\n        this.setState({ pending: true });\n\n        const position = this.getMousePosition(e);\n        const diffPosition = this.getDiffPosition(position[0]);\n        const newValue = this.getValueFromPosition(diffPosition);\n        this.move(newValue);\n    };\n\n    onTouchMove = e => {\n        if (e.touches.length > 1) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while touch is moving\n        this.setState({ pending: true });\n\n        const position = this.getTouchPosition(e);\n\n        if (typeof this.isScrolling === 'undefined') {\n            const diffMainDir = position[0] - this.startPosition[0];\n            const diffScrollDir = position[1] - this.startPosition[1];\n            this.isScrolling = Math.abs(diffScrollDir) > Math.abs(diffMainDir);\n        }\n\n        if (this.isScrolling) {\n            this.setState({ index: -1 });\n            return;\n        }\n\n        const diffPosition = this.getDiffPosition(position[0]);\n        const newValue = this.getValueFromPosition(diffPosition);\n\n        this.move(newValue);\n    };\n\n    onKeyDown = e => {\n        if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) {\n            return;\n        }\n\n        // Prevent controlled updates from happening while a key is pressed\n        this.setState({ pending: true });\n\n        switch (e.key) {\n            case 'ArrowLeft':\n            case 'ArrowDown':\n            case 'Left':\n            case 'Down':\n                e.preventDefault();\n                this.moveDownByStep();\n                break;\n            case 'ArrowRight':\n            case 'ArrowUp':\n            case 'Right':\n            case 'Up':\n                e.preventDefault();\n                this.moveUpByStep();\n                break;\n            case 'Home':\n                e.preventDefault();\n                this.move(this.props.min);\n                break;\n            case 'End':\n                e.preventDefault();\n                this.move(this.props.max);\n                break;\n            case 'PageDown':\n                e.preventDefault();\n                this.moveDownByStep(this.props.pageFn(this.props.step));\n                break;\n            case 'PageUp':\n                e.preventDefault();\n                this.moveUpByStep(this.props.pageFn(this.props.step));\n                break;\n            default:\n        }\n    };\n\n    onSliderMouseDown = e => {\n        // do nothing if disabled or right click\n        if (this.props.disabled || e.button === 2) {\n            return;\n        }\n\n        // Prevent controlled updates from happening while mouse is moving\n        this.setState({ pending: true });\n\n        if (!this.props.snapDragDisabled) {\n            const position = this.getMousePosition(e);\n            this.forceValueFromPosition(position[0], i => {\n                this.start(i, position[0]);\n                addHandlers(this.getMouseEventMap());\n            });\n        }\n\n        pauseEvent(e);\n    };\n\n    onSliderClick = e => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        if (this.props.onSliderClick && !this.hasMoved) {\n            const position = this.getMousePosition(e);\n            const valueAtPos = trimAlignValue(\n                this.calcValue(this.calcOffsetFromPosition(position[0])),\n                this.props\n            );\n            this.props.onSliderClick(valueAtPos);\n        }\n    };\n\n    getValue() {\n        return prepareOutValue(this.state.value);\n    }\n\n    getClosestIndex(pixelOffset) {\n        let minDist = Number.MAX_VALUE;\n        let closestIndex = -1;\n\n        const { value } = this.state;\n        const l = value.length;\n\n        for (let i = 0; i < l; i += 1) {\n            const offset = this.calcOffset(value[i]);\n            const dist = Math.abs(pixelOffset - offset);\n            if (dist < minDist) {\n                minDist = dist;\n                closestIndex = i;\n            }\n        }\n\n        return closestIndex;\n    }\n\n    getMousePosition(e) {\n        return [e[`page${this.axisKey()}`], e[`page${this.orthogonalAxisKey()}`]];\n    }\n\n    getTouchPosition(e) {\n        const touch = e.touches[0];\n        return [touch[`page${this.axisKey()}`], touch[`page${this.orthogonalAxisKey()}`]];\n    }\n\n    getKeyDownEventMap() {\n        return {\n            keydown: this.onKeyDown,\n            keyup: this.onKeyUp,\n            focusout: this.onBlur,\n        };\n    }\n\n    getMouseEventMap() {\n        return {\n            mousemove: this.onMouseMove,\n            mouseup: this.onMouseUp,\n        };\n    }\n\n    getTouchEventMap() {\n        return {\n            touchmove: this.onTouchMove,\n            touchend: this.onTouchEnd,\n        };\n    }\n\n    getValueFromPosition(position) {\n        const diffValue =\n            (position / (this.state.sliderLength - this.state.thumbSize)) *\n            (this.props.max - this.props.min);\n        return trimAlignValue(this.state.startValue + diffValue, this.props);\n    }\n\n    getDiffPosition(position) {\n        let diffPosition = position - this.state.startPosition;\n        if (this.props.invert) {\n            diffPosition *= -1;\n        }\n        return diffPosition;\n    }\n\n    // create the `keydown` handler for the i-th thumb\n    createOnKeyDown = i => e => {\n        if (this.props.disabled) {\n            return;\n        }\n        this.start(i);\n        addHandlers(this.getKeyDownEventMap());\n        pauseEvent(e);\n    };\n\n    // create the `mousedown` handler for the i-th thumb\n    createOnMouseDown = i => e => {\n        // do nothing if disabled or right click\n        if (this.props.disabled || e.button === 2) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while mouse is moving\n        this.setState({ pending: true });\n\n        const position = this.getMousePosition(e);\n        this.start(i, position[0]);\n        addHandlers(this.getMouseEventMap());\n        pauseEvent(e);\n    };\n\n    // create the `touchstart` handler for the i-th thumb\n    createOnTouchStart = i => e => {\n        if (this.props.disabled || e.touches.length > 1) {\n            return;\n        }\n\n        // Prevent controlled updates from happending while touch is moving\n        this.setState({ pending: true });\n\n        const position = this.getTouchPosition(e);\n        this.startPosition = position;\n        // don't know yet if the user is trying to scroll\n        this.isScrolling = undefined;\n        this.start(i, position[0]);\n        addHandlers(this.getTouchEventMap());\n        stopPropagation(e);\n    };\n\n    handleResize = () => {\n        // setTimeout of 0 gives element enough time to have assumed its new size if\n        // it is being resized\n        const resizeTimeout = window.setTimeout(() => {\n            // drop this timeout from pendingResizeTimeouts to reduce memory usage\n            this.pendingResizeTimeouts.shift();\n            this.resize();\n        }, 0);\n\n        this.pendingResizeTimeouts.push(resizeTimeout);\n    };\n\n    resize() {\n        const { slider, thumb0: thumb } = this;\n        if (!slider || !thumb) {\n            return;\n        }\n\n        const sizeKey = this.sizeKey();\n\n        // For the slider size, we want to use the client width/height, excluding any borders\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderSize = slider[sizeKey];\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()];\n\n        // For the thumb size, we want to use the outer width/height, including any borders\n        const thumbRect = thumb.getBoundingClientRect();\n        const thumbSize = thumbRect[sizeKey.replace('client', '').toLowerCase()];\n\n        const upperBound = sliderSize - thumbSize;\n        const sliderLength = Math.abs(sliderMax - sliderMin);\n\n        if (\n            this.state.upperBound !== upperBound ||\n            this.state.sliderLength !== sliderLength ||\n            this.state.thumbSize !== thumbSize\n        ) {\n            this.setState({\n                upperBound,\n                sliderLength,\n                thumbSize,\n            });\n        }\n    }\n\n    // calculates the offset of a thumb in pixels based on its value.\n    calcOffset(value) {\n        const range = this.props.max - this.props.min;\n        if (range === 0) {\n            return 0;\n        }\n        const ratio = (value - this.props.min) / range;\n        return ratio * this.state.upperBound;\n    }\n\n    // calculates the value corresponding to a given pixel offset, i.e. the inverse of `calcOffset`.\n    calcValue(offset) {\n        const ratio = offset / this.state.upperBound;\n        return ratio * (this.props.max - this.props.min) + this.props.min;\n    }\n\n    calcOffsetFromPosition(position) {\n        const { slider } = this;\n\n        const sliderRect = slider.getBoundingClientRect();\n        const sliderMax = sliderRect[this.posMaxKey()];\n        const sliderMin = sliderRect[this.posMinKey()];\n\n        // The `position` value passed in is the mouse position based on the window height.\n        // The slider bounding rect is based on the viewport, so we must add the window scroll\n        // offset to normalize the values.\n        const windowOffset = window[`page${this.axisKey()}Offset`];\n        const sliderStart = windowOffset + (this.props.invert ? sliderMax : sliderMin);\n\n        let pixelOffset = position - sliderStart;\n        if (this.props.invert) {\n            pixelOffset = this.state.sliderLength - pixelOffset;\n        }\n        pixelOffset -= this.state.thumbSize / 2;\n        return pixelOffset;\n    }\n\n    // Snaps the nearest thumb to the value corresponding to `position`\n    // and calls `callback` with that thumb's index.\n    forceValueFromPosition(position, callback) {\n        const pixelOffset = this.calcOffsetFromPosition(position);\n        const closestIndex = this.getClosestIndex(pixelOffset);\n        const nextValue = trimAlignValue(this.calcValue(pixelOffset), this.props);\n\n        // Clone this.state.value since we'll modify it temporarily\n        // eslint-disable-next-line zillow/react/no-access-state-in-setstate\n        const value = this.state.value.slice();\n        value[closestIndex] = nextValue;\n\n        // Prevents the slider from shrinking below `props.minDistance`\n        for (let i = 0; i < value.length - 1; i += 1) {\n            if (value[i + 1] - value[i] < this.props.minDistance) {\n                return;\n            }\n        }\n\n        this.fireChangeEvent('onBeforeChange');\n        this.hasMoved = true;\n        this.setState({ value }, () => {\n            callback(closestIndex);\n            this.fireChangeEvent('onChange');\n        });\n    }\n\n    // clear all pending timeouts to avoid error messages after unmounting\n    clearPendingResizeTimeouts() {\n        do {\n            const nextTimeout = this.pendingResizeTimeouts.shift();\n\n            clearTimeout(nextTimeout);\n        } while (this.pendingResizeTimeouts.length);\n    }\n\n    start(i, position) {\n        const thumbRef = this[`thumb${i}`];\n        if (thumbRef) {\n            thumbRef.focus();\n        }\n\n        const { zIndices } = this.state;\n        // remove wherever the element is\n        zIndices.splice(zIndices.indexOf(i), 1);\n        // add to end\n        zIndices.push(i);\n\n        this.setState(prevState => ({\n            startValue: prevState.value[i],\n            startPosition: position !== undefined ? position : prevState.startPosition,\n            index: i,\n            zIndices,\n        }));\n    }\n\n    moveUpByStep(step = this.props.step) {\n        const oldValue = this.state.value[this.state.index];\n        const newValue = trimAlignValue(oldValue + step, this.props);\n        this.move(Math.min(newValue, this.props.max));\n    }\n\n    moveDownByStep(step = this.props.step) {\n        const oldValue = this.state.value[this.state.index];\n        const newValue = trimAlignValue(oldValue - step, this.props);\n        this.move(Math.max(newValue, this.props.min));\n    }\n\n    move(newValue) {\n        const { index, value } = this.state;\n        const { length } = value;\n\n        // Short circuit if the value is not changing\n        const oldValue = value[index];\n        if (newValue === oldValue) {\n            return;\n        }\n\n        // Trigger only before the first movement\n        if (!this.hasMoved) {\n            this.fireChangeEvent('onBeforeChange');\n        }\n        this.hasMoved = true;\n\n        // if \"pearling\" (= thumbs pushing each other) is disabled,\n        // prevent the thumb from getting closer than `minDistance` to the previous or next thumb.\n        const { pearling, max, min, minDistance } = this.props;\n        if (!pearling) {\n            if (index > 0) {\n                const valueBefore = value[index - 1];\n                if (newValue < valueBefore + minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueBefore + minDistance;\n                }\n            }\n\n            if (index < length - 1) {\n                const valueAfter = value[index + 1];\n                if (newValue > valueAfter - minDistance) {\n                    // eslint-disable-next-line no-param-reassign\n                    newValue = valueAfter - minDistance;\n                }\n            }\n        }\n\n        value[index] = newValue;\n\n        // if \"pearling\" is enabled, let the current thumb push the pre- and succeeding thumbs.\n        if (pearling && length > 1) {\n            if (newValue > oldValue) {\n                this.pushSucceeding(value, minDistance, index);\n                trimSucceeding(length, value, minDistance, max);\n            } else if (newValue < oldValue) {\n                this.pushPreceding(value, minDistance, index);\n                trimPreceding(length, value, minDistance, min);\n            }\n        }\n\n        // Normally you would use `shouldComponentUpdate`,\n        // but since the slider is a low-level component,\n        // the extra complexity might be worth the extra performance.\n        this.setState({ value }, this.fireChangeEvent.bind(this, 'onChange'));\n    }\n\n    pushSucceeding(value, minDistance, index) {\n        let i;\n        let padding;\n        for (\n            i = index, padding = value[i] + minDistance;\n            value[i + 1] !== null && padding > value[i + 1];\n            i += 1, padding = value[i] + minDistance\n        ) {\n            // eslint-disable-next-line no-param-reassign\n            value[i + 1] = alignValue(padding, this.props);\n        }\n    }\n\n    pushPreceding(value, minDistance, index) {\n        for (\n            let i = index, padding = value[i] - minDistance;\n            value[i - 1] !== null && padding < value[i - 1];\n            i -= 1, padding = value[i] - minDistance\n        ) {\n            // eslint-disable-next-line no-param-reassign\n            value[i - 1] = alignValue(padding, this.props);\n        }\n    }\n\n    axisKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'Y';\n        }\n        // Defaults to 'horizontal';\n        return 'X';\n    }\n\n    orthogonalAxisKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'X';\n        }\n        // Defaults to 'horizontal'\n        return 'Y';\n    }\n\n    posMinKey() {\n        if (this.props.orientation === 'vertical') {\n            return this.props.invert ? 'bottom' : 'top';\n        }\n        // Defaults to 'horizontal'\n        return this.props.invert ? 'right' : 'left';\n    }\n\n    posMaxKey() {\n        if (this.props.orientation === 'vertical') {\n            return this.props.invert ? 'top' : 'bottom';\n        }\n        // Defaults to 'horizontal'\n        return this.props.invert ? 'left' : 'right';\n    }\n\n    sizeKey() {\n        if (this.props.orientation === 'vertical') {\n            return 'clientHeight';\n        }\n        // Defaults to 'horizontal'\n        return 'clientWidth';\n    }\n\n    fireChangeEvent(event) {\n        if (this.props[event]) {\n            this.props[event](prepareOutValue(this.state.value), this.state.index);\n        }\n    }\n\n    buildThumbStyle(offset, i) {\n        const style = {\n            position: 'absolute',\n            touchAction: 'none',\n            willChange: this.state.index >= 0 ? this.posMinKey() : '',\n            zIndex: this.state.zIndices.indexOf(i) + 1,\n        };\n        style[this.posMinKey()] = `${offset}px`;\n        return style;\n    }\n\n    buildTrackStyle(min, max) {\n        const obj = {\n            position: 'absolute',\n            willChange: this.state.index >= 0 ? `${this.posMinKey()},${this.posMaxKey()}` : '',\n        };\n        obj[this.posMinKey()] = min;\n        obj[this.posMaxKey()] = max;\n        return obj;\n    }\n\n    buildMarkStyle(offset) {\n        return {\n            position: 'absolute',\n            [this.posMinKey()]: offset,\n        };\n    }\n\n    renderThumb = (style, i) => {\n        const className = `${this.props.thumbClassName} ${this.props.thumbClassName}-${i} ${\n            this.state.index === i ? this.props.thumbActiveClassName : ''\n        }`;\n\n        const props = {\n            'ref': r => {\n                this[`thumb${i}`] = r;\n            },\n            'key': `${this.props.thumbClassName}-${i}`,\n            className,\n            style,\n            'onMouseDown': this.createOnMouseDown(i),\n            'onTouchStart': this.createOnTouchStart(i),\n            'onFocus': this.createOnKeyDown(i),\n            'tabIndex': 0,\n            'role': 'slider',\n            'aria-orientation': this.props.orientation,\n            'aria-valuenow': this.state.value[i],\n            'aria-valuemin': this.props.min,\n            'aria-valuemax': this.props.max,\n            'aria-label': Array.isArray(this.props.ariaLabel)\n                ? this.props.ariaLabel[i]\n                : this.props.ariaLabel,\n            'aria-labelledby': Array.isArray(this.props.ariaLabelledby)\n                ? this.props.ariaLabelledby[i]\n                : this.props.ariaLabelledby,\n        };\n\n        const state = {\n            index: i,\n            value: prepareOutValue(this.state.value),\n            valueNow: this.state.value[i],\n        };\n\n        if (this.props.ariaValuetext) {\n            props['aria-valuetext'] =\n                typeof this.props.ariaValuetext === 'string'\n                    ? this.props.ariaValuetext\n                    : this.props.ariaValuetext(state);\n        }\n\n        return this.props.renderThumb(props, state);\n    };\n\n    renderThumbs(offset) {\n        const { length } = offset;\n\n        const styles = [];\n        for (let i = 0; i < length; i += 1) {\n            styles[i] = this.buildThumbStyle(offset[i], i);\n        }\n\n        const res = [];\n        for (let i = 0; i < length; i += 1) {\n            res[i] = this.renderThumb(styles[i], i);\n        }\n        return res;\n    }\n\n    renderTrack = (i, offsetFrom, offsetTo) => {\n        const props = {\n            key: `${this.props.trackClassName}-${i}`,\n            className: `${this.props.trackClassName} ${this.props.trackClassName}-${i}`,\n            style: this.buildTrackStyle(offsetFrom, this.state.upperBound - offsetTo),\n        };\n        const state = {\n            index: i,\n            value: prepareOutValue(this.state.value),\n        };\n        return this.props.renderTrack(props, state);\n    };\n\n    renderTracks(offset) {\n        const tracks = [];\n        const lastIndex = offset.length - 1;\n\n        tracks.push(this.renderTrack(0, 0, offset[0]));\n\n        for (let i = 0; i < lastIndex; i += 1) {\n            tracks.push(this.renderTrack(i + 1, offset[i], offset[i + 1]));\n        }\n\n        tracks.push(this.renderTrack(lastIndex + 1, offset[lastIndex], this.state.upperBound));\n\n        return tracks;\n    }\n\n    renderMarks() {\n        let { marks } = this.props;\n\n        const range = this.props.max - this.props.min + 1;\n\n        if (typeof marks === 'boolean') {\n            marks = Array.from({ length: range }).map((_, key) => key);\n        } else if (typeof marks === 'number') {\n            marks = Array.from({ length: range })\n                .map((_, key) => key)\n                .filter(key => key % marks === 0);\n        }\n\n        return marks\n            .map(parseFloat)\n            .sort((a, b) => a - b)\n            .map(mark => {\n                const offset = this.calcOffset(mark);\n\n                const props = {\n                    key: mark,\n                    className: this.props.markClassName,\n                    style: this.buildMarkStyle(offset),\n                };\n\n                return this.props.renderMark(props);\n            });\n    }\n\n    render() {\n        const offset = [];\n        const { value } = this.state;\n        const l = value.length;\n        for (let i = 0; i < l; i += 1) {\n            offset[i] = this.calcOffset(value[i], i);\n        }\n\n        const tracks = this.props.withTracks ? this.renderTracks(offset) : null;\n        const thumbs = this.renderThumbs(offset);\n        const marks = this.props.marks ? this.renderMarks() : null;\n\n        return React.createElement(\n            'div',\n            {\n                ref: r => {\n                    this.slider = r;\n                    this.resizeElementRef.current = r;\n                },\n                style: { position: 'relative' },\n                className: this.props.className + (this.props.disabled ? ' disabled' : ''),\n                onMouseDown: this.onSliderMouseDown,\n                onClick: this.onSliderClick,\n            },\n            tracks,\n            thumbs,\n            marks\n        );\n    }\n}\n\nexport default ReactSlider;\n"]},"metadata":{},"sourceType":"module"}