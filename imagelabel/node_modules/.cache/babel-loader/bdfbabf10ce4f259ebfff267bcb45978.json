{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar ProgressBar = function (_a) {\n  var bgColor = _a.bgColor,\n      completed = _a.completed,\n      baseBgColor = _a.baseBgColor,\n      height = _a.height,\n      width = _a.width,\n      margin = _a.margin,\n      padding = _a.padding,\n      borderRadius = _a.borderRadius,\n      labelAlignment = _a.labelAlignment,\n      labelColor = _a.labelColor,\n      labelSize = _a.labelSize,\n      isLabelVisible = _a.isLabelVisible,\n      transitionDuration = _a.transitionDuration,\n      transitionTimingFunction = _a.transitionTimingFunction,\n      className = _a.className,\n      dir = _a.dir,\n      ariaValuemin = _a.ariaValuemin,\n      ariaValuemax = _a.ariaValuemax,\n      ariaValuetext = _a.ariaValuetext,\n      maxCompleted = _a.maxCompleted,\n      customLabel = _a.customLabel,\n      animateOnRender = _a.animateOnRender,\n      barContainerClassName = _a.barContainerClassName,\n      completedClassName = _a.completedClassName,\n      labelClassName = _a.labelClassName,\n      _b = _a.initCompletedOnAnimation,\n      initCompletedOnAnimation = _b === void 0 ? 0 : _b;\n\n  var getAlignment = function (alignmentOption) {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  var alignment = getAlignment(labelAlignment);\n  var initCompletedOnAnimationStr = typeof initCompletedOnAnimation === \"number\" ? initCompletedOnAnimation + \"%\" : initCompletedOnAnimation;\n\n  var getFillerWidth = function (maxCompletedValue, completedValue) {\n    if (maxCompletedValue) {\n      var ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 ? \"100%\" : ratio * 100 + \"%\";\n    }\n\n    return initCompletedOnAnimationStr;\n  };\n\n  var fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  var _c = React.useState(initCompletedOnAnimationStr),\n      initWidth = _c[0],\n      setInitWidth = _c[1];\n\n  var containerStyles = {\n    height: height,\n    background: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin\n  };\n  var fillerStyles = {\n    height: height,\n    width: animateOnRender ? initWidth : fillerWidth,\n    background: bgColor,\n    transition: \"width \" + (transitionDuration || \"1s\") + \" \" + (transitionTimingFunction || \"ease-in-out\"),\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: labelAlignment !== \"outside\" && alignment ? alignment : \"normal\"\n  };\n  var labelStyles = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\"\n  };\n  var outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\"\n  };\n  var completedStr = typeof completed === \"number\" ? completed + \"%\" : \"\" + completed;\n  var labelStr = customLabel ? customLabel : completedStr;\n  React.useEffect(function () {\n    if (animateOnRender) {\n      requestAnimationFrame(function () {\n        return setInitWidth(fillerWidth);\n      });\n    }\n  }, [fillerWidth, animateOnRender]);\n  return React.createElement(\"div\", {\n    style: className ? undefined : outsideStyles,\n    className: className,\n    dir: dir,\n    role: \"progressbar\",\n    \"aria-valuenow\": parseFloat(labelStr),\n    \"aria-valuemin\": ariaValuemin,\n    \"aria-valuemax\": ariaValuemax,\n    \"aria-valuetext\": \"\" + (ariaValuetext === null ? labelStr : ariaValuetext)\n  }, React.createElement(\"div\", {\n    style: barContainerClassName ? undefined : containerStyles,\n    className: barContainerClassName\n  }, React.createElement(\"div\", {\n    style: completedClassName ? undefined : fillerStyles,\n    className: completedClassName\n  }, labelAlignment !== \"outside\" && React.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr))), labelAlignment === \"outside\" && React.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr));\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n  dir: PropTypes.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes.number,\n  customLabel: PropTypes.string,\n  animateOnRender: PropTypes.bool,\n  barContainerClassName: PropTypes.string,\n  completedClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  initCompletedOnAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n  animateOnRender: false,\n  initCompletedOnAnimation: 0\n};\nexports.default = ProgressBar;","map":{"version":3,"mappings":"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","names":["ProgressBar","_a","bgColor","completed","baseBgColor","height","width","margin","padding","borderRadius","labelAlignment","labelColor","labelSize","isLabelVisible","transitionDuration","transitionTimingFunction","className","dir","ariaValuemin","ariaValuemax","ariaValuetext","maxCompleted","customLabel","animateOnRender","barContainerClassName","completedClassName","labelClassName","_b","initCompletedOnAnimation","getAlignment","alignmentOption","alignment","initCompletedOnAnimationStr","getFillerWidth","maxCompletedValue","completedValue","ratio","Number","fillerWidth","React.useState","initWidth","setInitWidth","containerStyles","background","fillerStyles","transition","display","alignItems","justifyContent","labelStyles","color","fontWeight","fontSize","outsideStyles","completedStr","labelStr","React.useEffect","requestAnimationFrame","React.createElement","style","undefined","role","parseFloat","propTypes","PropTypes.oneOfType","PropTypes.string","PropTypes.number","isRequired","PropTypes.oneOf","PropTypes.bool","defaultProps"],"sources":["C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\node_modules\\@ramonak\\react-progress-bar\\src\\index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nexport type ProgressBarProps = {\n  completed: string | number;\n  bgColor?: string;\n  baseBgColor?: string;\n  height?: string;\n  width?: string;\n  borderRadius?: string;\n  margin?: string;\n  padding?: string;\n  labelAlignment?: \"left\" | \"center\" | \"right\" | \"outside\";\n  labelColor?: string;\n  labelSize?: string;\n  isLabelVisible?: boolean;\n  transitionDuration?: string;\n  transitionTimingFunction?:\n  | \"ease\"\n  | \"linear\"\n  | \"ease-in\"\n  | \"ease-out\"\n  | \"ease-in-out\";\n  className?: string;\n  dir?: \"ltr\" | \"rtl\" | \"auto\";\n  ariaValuemin?: number;\n  ariaValuemax?: number;\n  ariaValuetext?: number | null;\n  maxCompleted?: number;\n  customLabel?: string;\n  animateOnRender?: boolean;\n  barContainerClassName?: string;\n  completedClassName?: string;\n  labelClassName?: string;\n  initCompletedOnAnimation?: string | number\n};\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({\n  bgColor,\n  completed,\n  baseBgColor,\n  height,\n  width,\n  margin,\n  padding,\n  borderRadius,\n  labelAlignment,\n  labelColor,\n  labelSize,\n  isLabelVisible,\n  transitionDuration,\n  transitionTimingFunction,\n  className,\n  dir,\n  ariaValuemin,\n  ariaValuemax,\n  ariaValuetext,\n  maxCompleted,\n  customLabel,\n  animateOnRender,\n  barContainerClassName,\n  completedClassName,\n  labelClassName,\n  initCompletedOnAnimation = 0\n}) => {\n  const getAlignment = (\n    alignmentOption: ProgressBarProps[\"labelAlignment\"]\n  ) => {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  const alignment = getAlignment(labelAlignment);\n\n  const initCompletedOnAnimationStr = typeof initCompletedOnAnimation === \"number\" ? `${initCompletedOnAnimation}%` : initCompletedOnAnimation;\n\n  const getFillerWidth = (\n    maxCompletedValue: ProgressBarProps[\"maxCompleted\"],\n    completedValue: ProgressBarProps[\"completed\"]\n  ) => {\n    if (maxCompletedValue) {\n      const ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 ? \"100%\" : `${ratio * 100}%`;\n    }\n    return initCompletedOnAnimationStr;\n  };\n\n  const fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  const [initWidth, setInitWidth] = React.useState<string>(initCompletedOnAnimationStr);\n\n  const containerStyles: React.CSSProperties = {\n    height: height,\n    background: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin,\n  };\n\n  const fillerStyles: React.CSSProperties = {\n    height: height,\n    width: animateOnRender ? initWidth : fillerWidth,\n    background: bgColor,\n    transition: `width ${transitionDuration || \"1s\"} ${transitionTimingFunction || \"ease-in-out\"\n      }`,\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent:\n      labelAlignment !== \"outside\" && alignment ? alignment : \"normal\",\n  };\n\n  const labelStyles: React.CSSProperties = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\",\n  };\n\n  const outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\",\n  };\n\n  const completedStr =\n    typeof completed === \"number\" ? `${completed}%` : `${completed}`;\n\n  const labelStr = customLabel ? customLabel : completedStr;\n\n  React.useEffect(() => {\n    if (animateOnRender) {\n      requestAnimationFrame(() => setInitWidth(fillerWidth));\n    }\n  }, [fillerWidth, animateOnRender]);\n\n  return (\n    <div\n      style={className ? undefined : outsideStyles}\n      className={className}\n      dir={dir}\n      role=\"progressbar\"\n      aria-valuenow={parseFloat(labelStr)}\n      aria-valuemin={ariaValuemin}\n      aria-valuemax={ariaValuemax}\n      aria-valuetext={`${ariaValuetext === null ? labelStr : ariaValuetext}`}\n    >\n      <div\n        style={barContainerClassName ? undefined : containerStyles}\n        className={barContainerClassName}\n      >\n        <div\n          style={completedClassName ? undefined : fillerStyles}\n          className={completedClassName}\n        >\n          {labelAlignment !== \"outside\" && (\n            <span\n              style={labelClassName ? undefined : labelStyles}\n              className={labelClassName}\n            >\n              {labelStr}\n            </span>\n          )}\n        </div>\n      </div>\n      {labelAlignment === \"outside\" && (\n        <span\n          style={labelClassName ? undefined : labelStyles}\n          className={labelClassName}\n        >\n          {labelStr}\n        </span>\n      )}\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n  dir: PropTypes.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes.number,\n  customLabel: PropTypes.string,\n  animateOnRender: PropTypes.bool,\n  barContainerClassName: PropTypes.string,\n  completedClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n  initCompletedOnAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n  animateOnRender: false,\n  initCompletedOnAnimation: 0\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"script"}