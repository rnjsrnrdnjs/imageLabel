[{"C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\index.js":"1","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\App.js":"2","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\reportWebVitals.js":"3","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\components\\splash.js":"4","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\components\\main.js":"5","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\serverURL.js":"6"},{"size":588,"mtime":1649501995705,"results":"7","hashOfConfig":"8"},{"size":832,"mtime":1649508220492,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1649497552950,"results":"10","hashOfConfig":"8"},{"size":2537,"mtime":1649508233474,"results":"11","hashOfConfig":"8"},{"size":9783,"mtime":1654278691198,"results":"12","hashOfConfig":"8"},{"size":73,"mtime":1649504073654,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16or2z8",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\index.js",[],[],"C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\App.js",["35","36","37","38"],[],"import \"./App.css\";\nimport { Route, Routes, useLocation, useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Splash from \"./components/splash\";\nimport Main from \"./components/main\";\n\nfunction App() {\n  const [loginState, setLoginState] = useState(false);\n  const updateLoggedIn = () => {\n    setLoginState(true);\n  };\n  return (\n    <div className=\"ALL\">\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <Splash loginState={loginState} updateLoggedIn={updateLoggedIn} />\n          }\n          exact={true}\n        />\n        <Route\n          path=\"/Main\"\n          element={\n            <Main loginState={loginState} updateLoggedIn={updateLoggedIn} />\n          }\n          exact={true}\n        />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\reportWebVitals.js",[],[],"C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\components\\splash.js",["39","40","41","42","43"],[],"import { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Route, Routes, useLocation, useNavigate } from \"react-router-dom\";\r\nimport serverURL from \"../serverURL\";\r\n\r\nexport default function Splash({ updateLoggedIn, loginState }) {\r\n  const [loginID, setLoginID] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          width: \"400px\",\r\n          height: \"300px\",\r\n          border: \"1px solid #828282\",\r\n          padding: \"10px\",\r\n          justifyContent: \"center\",\r\n          alignContent: \"center\",\r\n          alignItems: \"center\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{ marginBottom: \"20px\", fontSize: \"18px\", fontWeight: \"bold\" }}\r\n        >\r\n          사용자 로그인\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\", fontSize: \"18px\" }}>\r\n          <div>사용자 ID </div>\r\n          <input\r\n            style={{\r\n              marginLeft: \"5px\",\r\n              height: \"20px\",\r\n            }}\r\n            value={loginID}\r\n            onChange={(e) => {\r\n              setLoginID(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\", fontSize: \"18px\" }}>\r\n          <div>비밀번호 </div>\r\n          <input\r\n            style={{\r\n              marginLeft: \"5px\",\r\n              height: \"20px\",\r\n            }}\r\n            value={password}\r\n            onChange={(e) => {\r\n              setPassword(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            fontSize: \"18px\",\r\n            border: \"1px solid #828282\",\r\n            padding: \"10px\",\r\n            marginTop: \"10px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={async () => {\r\n            console.log(1);\r\n            await axios\r\n              .post(`${serverURL}/tokenCheck`, {\r\n                loginID,\r\n                password,\r\n              })\r\n              .then((res) => {\r\n                if (res.data.status === \"true\") {\r\n                  updateLoggedIn();\r\n                  navigate(\"Main\");\r\n                }\r\n              });\r\n          }}\r\n        >\r\n          로그인\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\components\\main.js",["44","45","46","47","48","49","50","51","52","53","54"],[],"import { useState, useEffect, useRef, ProgressBar } from \"react\";\r\nimport { Route, Routes, useLocation, useNavigate } from \"react-router-dom\";\r\nimport ReactSlider from \"react-slider\";\r\nimport axios from \"axios\";\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default function Main({ updateLogedIn, loginState }) {\r\n  const navigate = useNavigate();\r\n  const [frameList, setFrameList] = useState(null);\r\n  const frameRef = useRef(null);\r\n  const frameWidthRef = useRef(null);\r\n  const selectRef = useRef(null);\r\n  useEffect(() => {\r\n    if (loginState === false) navigate(\"/\");\r\n    async function fetchData() {\r\n      await axios.post(`http://localhost:5000/getLabelList`).then((res) => {\r\n        console.log(res.data);\r\n        setFrameList(res.data);\r\n        setSelectList([]);\r\n      });\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const [delay, setDelay] = useState(null);\r\n  const [now, setNow] = useState(0);\r\n  const [selectList, setSelectList] = useState([]);\r\n  const [playChk, setPlayChk] = useState(false);\r\n\r\n  useInterval(\r\n    () => {\r\n      setNow(now + 1);\r\n      //console.log(now);\r\n    },\r\n    frameList !== null && now < frameList.list.Labels.length - 1 ? delay : null\r\n  );\r\n  useEffect(() => {\r\n    if (frameList === null || frameRef === null || frameWidthRef === null)\r\n      return;\r\n    console.log(frameWidthRef.current.offsetWidth);\r\n    frameRef.current.scrollTo(frameWidthRef.current.offsetWidth * now, 0);\r\n    //frameRef.current.scrollIntoView(100, 100);\r\n    //console.log(e.target.scrollTo(500, 500));\r\n\r\n    //console.log(frameRef.current);\r\n  }, [now, frameRef, frameWidthRef]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        alignContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          marginTop: \"10px\",\r\n          justifyContent: \"flex-end\",\r\n          width: \"100vw\",\r\n          marginRight: \"10vw\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            fontSize: \"30px\",\r\n            fontWeight: \"bold\",\r\n            borderRadius: \"10px\",\r\n            padding: \"10px\",\r\n            border: \"1px solid #828282\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={async () => {\r\n            if (frameList === null) return;\r\n            await axios\r\n              .post(`http://localhost:5000/selectLabel`, {\r\n                selectList: selectList,\r\n              })\r\n              .then((res) => {\r\n                console.log(res.data);\r\n                if (res.data.status === \"false\")\r\n                  window.alert(\"프레임을 선택해주세요.\");\r\n                else if (res.data.status === \"true\") {\r\n                  window.alert(\"선택 프레임이 제출되었습니다.\");\r\n                }\r\n                setSelectList([]);\r\n              });\r\n          }}\r\n        >\r\n          제출\r\n        </div>\r\n        <div\r\n          style={{\r\n            marginLeft: \"10px\",\r\n            fontSize: \"30px\",\r\n            fontWeight: \"bold\",\r\n            borderRadius: \"10px\",\r\n            padding: \"10px\",\r\n            border: \"1px solid #828282\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={async () => {\r\n            if (frameList === null) return;\r\n            setSelectList([]);\r\n            await axios\r\n              .post(`http://localhost:5000/newLabelList`, {\r\n                prevId: frameList.list.id,\r\n              })\r\n              .then((res) => {\r\n                console.log(res.data);\r\n                setFrameList(res.data);\r\n              });\r\n          }}\r\n        >\r\n          다른프레임\r\n        </div>\r\n      </div>\r\n      {frameList !== null && (\r\n        <div style={{ marginTop: \"10px\", maxWidth: \"80vw\", maxHeight: \"40vh\" }}>\r\n          <img\r\n            src={`http://localhost:5000/outputs/${frameList.list.name}/${frameList.list.Labels[now].name}`}\r\n            style={{ maxWidth: \"80vw\", maxHeight: \"40vh\" }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {frameList !== null && (\r\n        <input\r\n          type=\"range\"\r\n          value={now}\r\n          style={{ width: \"80vw\", height: \"20px\" }}\r\n          max={frameList.list.Labels.length - 1}\r\n          min={0}\r\n          onChange={(e) => {\r\n            setNow(parseInt(e.target.value));\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <div\r\n        ref={frameRef}\r\n        style={{\r\n          marginTop: \"10px\",\r\n          overflow: \"scroll\",\r\n          overflowY: \"hidden\",\r\n          maxWidth: \"80vw\",\r\n          maxHeight: \"20vh\",\r\n        }}\r\n      >\r\n        <div style={{}}></div>\r\n        {frameList !== null &&\r\n          frameList.list.Labels.map((list, idx) => (\r\n            <div\r\n              ref={frameWidthRef}\r\n              style={\r\n                now !== idx\r\n                  ? {\r\n                      maxWidth: \"20vh\",\r\n                      maxHeight: \"20vh\",\r\n                      justifyContent: \"center\",\r\n                      alignContent: \"center\",\r\n                      alignItems: \"center\",\r\n                    }\r\n                  : {\r\n                      border: \"3px solid #828282\",\r\n                      maxWidth: \"20vh\",\r\n                      justifyContent: \"center\",\r\n                      alignContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      maxHeight: \"20vh\",\r\n                    }\r\n              }\r\n            >\r\n              {/*<div>{list.select === true && \"123\"}</div>*/}\r\n              <img\r\n                src={`http://localhost:5000/outputs/${frameList.list.name}/${list.name}`}\r\n                style={\r\n                  list.select === true\r\n                    ? {\r\n                        boxSizing: \"border-box\",\r\n                        border: \"1px solid green\",\r\n                        borderRadius: \"50vh\",\r\n                        maxWidth: \"20vh\",\r\n                        maxHeight: \"20vh\",\r\n                      }\r\n                    : {\r\n                        maxWidth: \"20vh\",\r\n                        maxHeight: \"20vh\",\r\n                      }\r\n                }\r\n              />\r\n            </div>\r\n          ))}\r\n      </div>\r\n      <div style={{ marginTop: \"10px\" }}>\r\n        <div\r\n          style={{\r\n            marginRight: \"10px\",\r\n            borderRadius: \"10px\",\r\n            border: \"1px solid #828282\",\r\n            padding: \"10px\",\r\n          }}\r\n          onClick={() => {\r\n            if (frameList === null) return;\r\n            setDelay(null);\r\n            setPlayChk(false);\r\n            if (now >= 1) setNow(now - 1);\r\n          }}\r\n        >\r\n          이전 프레임\r\n        </div>\r\n        <div\r\n          style={{\r\n            marginRight: \"10px\",\r\n            borderRadius: \"10px\",\r\n            border: \"1px solid #828282\",\r\n            padding: \"10px\",\r\n          }}\r\n          onClick={() => {\r\n            if (frameList === null) return;\r\n            if (playChk === false) {\r\n              setPlayChk(true);\r\n              setDelay(null);\r\n              setDelay(50);\r\n            } else {\r\n              setPlayChk(false);\r\n              setDelay(null);\r\n            }\r\n          }}\r\n        >\r\n          {playChk === false ? \"재생\" : \"멈춤\"}\r\n        </div>\r\n        <div\r\n          style={{\r\n            marginRight: \"10px\",\r\n            borderRadius: \"10px\",\r\n            border: \"1px solid #828282\",\r\n            padding: \"10px\",\r\n          }}\r\n          onClick={() => {\r\n            if (frameList === null) return;\r\n            setDelay(null);\r\n            setPlayChk(false);\r\n            if (frameList.list.Labels.length - 1 > now) setNow(now + 1);\r\n          }}\r\n        >\r\n          다음프레임\r\n        </div>\r\n        <div\r\n          style={{\r\n            marginRight: \"10px\",\r\n            borderRadius: \"10px\",\r\n            border: \"1px solid #828282\",\r\n            padding: \"10px\",\r\n          }}\r\n          onClick={() => {\r\n            setDelay(null);\r\n            setPlayChk(false);\r\n\r\n            if (frameList.list.Labels[now].select === false) {\r\n              if (selectList.length <= 9) {\r\n                setSelectList(selectList.concat(frameList.list.Labels[now]));\r\n                frameList.list.Labels[now].select = true;\r\n              } else window.alert(\"프레임은 최대 10개까지 고를수 있습니다.\");\r\n            } else if (frameList.list.Labels[now].select === true) {\r\n              setSelectList(\r\n                selectList.filter(\r\n                  (val, idx) => val.id !== frameList.list.Labels[now].id\r\n                )\r\n              );\r\n              frameList.list.Labels[now].select = false;\r\n            }\r\n          }}\r\n        >\r\n          선택\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{\r\n          marginTop: \"10px\",\r\n          overflow: \"scroll\",\r\n          overflowY: \"hidden\",\r\n          maxWidth: \"80vw\",\r\n          maxHeight: \"20vh\",\r\n        }}\r\n      >\r\n        {selectList.map((list, idx) => (\r\n          <div\r\n            style={{\r\n              order: list.id,\r\n            }}\r\n          >\r\n            <img\r\n              src={`http://localhost:5000/outputs/${frameList.list.name}/${list.name}`}\r\n              style={{\r\n                maxWidth: \"20vh\",\r\n                maxHeight: \"20vh\",\r\n              }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\권국원\\Desktop\\산학협력플젝\\src\\imagelabel\\src\\serverURL.js",[],[],{"ruleId":"55","severity":1,"message":"56","line":2,"column":25,"nodeType":"57","messageId":"58","endLine":2,"endColumn":36},{"ruleId":"55","severity":1,"message":"59","line":2,"column":38,"nodeType":"57","messageId":"58","endLine":2,"endColumn":49},{"ruleId":"55","severity":1,"message":"60","line":3,"column":20,"nodeType":"57","messageId":"58","endLine":3,"endColumn":29},{"ruleId":"55","severity":1,"message":"61","line":3,"column":31,"nodeType":"57","messageId":"58","endLine":3,"endColumn":37},{"ruleId":"55","severity":1,"message":"60","line":1,"column":20,"nodeType":"57","messageId":"58","endLine":1,"endColumn":29},{"ruleId":"55","severity":1,"message":"61","line":1,"column":31,"nodeType":"57","messageId":"58","endLine":1,"endColumn":37},{"ruleId":"55","severity":1,"message":"62","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":15},{"ruleId":"55","severity":1,"message":"63","line":3,"column":17,"nodeType":"57","messageId":"58","endLine":3,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":3,"column":25,"nodeType":"57","messageId":"58","endLine":3,"endColumn":36},{"ruleId":"55","severity":1,"message":"64","line":1,"column":39,"nodeType":"57","messageId":"58","endLine":1,"endColumn":50},{"ruleId":"55","severity":1,"message":"62","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":15},{"ruleId":"55","severity":1,"message":"63","line":2,"column":17,"nodeType":"57","messageId":"58","endLine":2,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":2,"column":25,"nodeType":"57","messageId":"58","endLine":2,"endColumn":36},{"ruleId":"55","severity":1,"message":"65","line":3,"column":8,"nodeType":"57","messageId":"58","endLine":3,"endColumn":19},{"ruleId":"55","severity":1,"message":"66","line":31,"column":9,"nodeType":"57","messageId":"58","endLine":31,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":42,"column":6,"nodeType":"69","endLine":42,"endColumn":8,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":65,"column":6,"nodeType":"69","endLine":65,"endColumn":36,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":141,"column":11,"nodeType":"75","endLine":144,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":196,"column":15,"nodeType":"75","endLine":212,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":314,"column":13,"nodeType":"75","endLine":320,"endColumn":15},"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'ProgressBar' is defined but never used.","'ReactSlider' is defined but never used.","'selectRef' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loginState' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has a missing dependency: 'frameList'. Either include it or remove the dependency array.",["77"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [loginState, navigate]",{"range":"82","text":"83"},"Update the dependencies array to be: [now, frameRef, frameWidthRef, frameList]",{"range":"84","text":"85"},[1228,1230],"[loginState, navigate]",[1984,2014],"[now, frameRef, frameWidthRef, frameList]"]